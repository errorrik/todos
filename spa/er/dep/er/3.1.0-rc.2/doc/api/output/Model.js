Ext.data.JsonP.Model({"tagname":"class","name":"Model","autodetected":{},"files":[{"filename":"Model.js","href":"Model.html#Model"}],"extends":"mini-event.EventTarget","params":[{"tagname":"params","type":"Object","name":"context","optional":true,"doc":"<p>初始化的数据</p>\n","html_type":"Object"}],"members":[{"name":"datasource","tagname":"property","owner":"Model","id":"property-datasource","meta":{"protected":true}},{"name":"constructor","tagname":"method","owner":"Model","id":"method-constructor","meta":{}},{"name":"addPendingWorker","tagname":"method","owner":"Model","id":"method-addPendingWorker","meta":{}},{"name":"clone","tagname":"method","owner":"Model","id":"method-clone","meta":{}},{"name":"dispose","tagname":"method","owner":"Model","id":"method-dispose","meta":{}},{"name":"dump","tagname":"method","owner":"Model","id":"method-dump","meta":{}},{"name":"fill","tagname":"method","owner":"Model","id":"method-fill","meta":{}},{"name":"get","tagname":"method","owner":"Model","id":"method-get","meta":{}},{"name":"getAsModel","tagname":"method","owner":"Model","id":"method-getAsModel","meta":{}},{"name":"getDatasource","tagname":"method","owner":"Model","id":"method-getDatasource","meta":{}},{"name":"handleError","tagname":"method","owner":"Model","id":"method-handleError","meta":{}},{"name":"has","tagname":"method","owner":"Model","id":"method-has","meta":{}},{"name":"hasReadableValue","tagname":"method","owner":"Model","id":"method-hasReadableValue","meta":{}},{"name":"hasValue","tagname":"method","owner":"Model","id":"method-hasValue","meta":{}},{"name":"load","tagname":"method","owner":"Model","id":"method-load","meta":{}},{"name":"prepare","tagname":"method","owner":"Model","id":"method-prepare","meta":{"protected":true}},{"name":"remove","tagname":"method","owner":"Model","id":"method-remove","meta":{}},{"name":"set","tagname":"method","owner":"Model","id":"method-set","meta":{}},{"name":"valueOf","tagname":"method","owner":"Model","id":"method-valueOf","meta":{"deprecated":{"text":"<p>建议使用<a href=\"#!/api/Model-method-dump\" rel=\"Model-method-dump\" class=\"docClass\">dump</a>方法</p>\n"}}},{"name":"change","tagname":"event","owner":"Model","id":"event-change","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-Model","short_doc":"在ER框架中，Model并不一定要继承该类，任何对象都可以作为Model使用\n\nER对于Model的处理如下：\n\n\n通过Action的createModel创建一个对象\n如果该对象有load函数，则执行该函数，并分为以下情况：\n\n\n如...","component":false,"superclasses":["mini-event.EventTarget"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>mini-event.EventTarget<div class='subclass '><strong>Model</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/Model.html#Model' target='_blank'>Model.js</a></div></pre><div class='doc-contents'><p>在ER框架中，Model并不一定要继承该类，任何对象都可以作为Model使用</p>\n\n<p>ER对于Model的处理如下：</p>\n\n<ol>\n<li>通过Action的<code>createModel</code>创建一个对象</li>\n<li>如果该对象有<code>load</code>函数，则执行该函数，并分为以下情况：\n\n<ul>\n<li>如果<code>load</code>函数返回一个Promise，则认为是异步加载</li>\n<li>反之则认为是同步加载，对象已经直接可以使用</li>\n</ul>\n</li>\n<li>如果对象没有<code>load</code>函数，则默认对象本身就是Model</li>\n<li>当离开Action时，如果Model有<code>dispose</code>方法，则会调用以销毁对象</li>\n</ol>\n\n\n<p>该Model类为一个通用的可配置的基类，提供了数据加载的相关方法</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>context</span> : Object (optional)<div class='sub-desc'><p>初始化的数据</p>\n</div></li></ul></div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-datasource' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Model'>Model</span><br/><a href='source/Model.html#Model-property-datasource' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Model-property-datasource' class='name expandable'>datasource</a> : Object | Array | Function<span class=\"signature\"><span class='protected' >protected</span></span></div><div class='description'><div class='short'>当前Model的数据源\n\n数据源是对数据一系列配置，其中保存了多个数据的获取函数，有以下方式\n\n\n单一数据源配置\n\n  如果datasource是一个函数，则认为该函数是一个数据获取函数，\n  执行该函数，并把返回值按照一个对象放到当...</div><div class='long'><p>当前Model的数据源</p>\n\n<p>数据源是对数据一系列配置，其中保存了多个数据的获取函数，有以下方式</p>\n\n<ul>\n<li><p>单一数据源配置</p>\n\n<p>  如果<code>datasource</code>是一个函数，则认为该函数是一个数据获取函数，\n  执行该函数，并把返回值按照一个对象放到当前<a href=\"#!/api/Model\" rel=\"Model\" class=\"docClass\">Model</a>中</p>\n\n<pre><code>  // 配置从指定的URL获取数据\n  datasource = require('./datasource').remote('/model/list')\n</code></pre></li>\n<li><p>并发请求数据</p>\n\n<p>  通过一个对象配置并发的数据获取。对象中每一个属性对应一个获取函数，\n  当数据获取后，会调用<code>this.set(name, result)</code>，以属性名为键值添加</p>\n\n<pre><code>  // 并发请求多个URL\n  datasource = {\n      'list': require('./datasource').remote('/model/list'),\n      'config': require('./datasource').constant('listConfig')\n  };\n</code></pre></li>\n<li><p>串行请求数据</p>\n\n<p>  通过一个数组配置并发的数据获取，数组中包含对象。将按照数组的顺序，\n  依次加载每一个对象（对象中的各属性是并发）</p>\n\n<pre><code>  // 串行请求几个URL\n  datasource = [\n      { 'config': require('./datasource').constant('config') },\n      { 'list': require('./datasource').remote('/model/list') }\n  ];\n</code></pre>\n\n<p>  注意使用该方案时，各对象中的键 <strong>不要相同</strong> ，否则会造成数据的覆盖</p></li>\n<li><p>嵌套配置</p>\n\n<p>  数组和对象可以相互嵌套，但有一个限制：</p>\n\n<blockquote><p>当一个对象中某个属性的值为普通对象（非数据加载配置项）或数组时，\n该属性名将不起作用，即不会在<a href=\"#!/api/Model\" rel=\"Model\" class=\"docClass\">Model</a>对象中存在以该属性名为键的值</p></blockquote>\n\n<p>  以下为一个串行和并行混杂的数据源配置：</p>\n\n<pre><code>  datasource = {\n      'one': [getX, getY, getZ],\n      'two': getA,\n      'three': [\n          { 'four': getB },\n          { 'five': getC }\n      ]\n  };\n</code></pre>\n\n<p>  以上对象将在最终的<a href=\"#!/api/Model\" rel=\"Model\" class=\"docClass\">Model</a>对象中生成<code>two</code>、<code>four</code>和<code>five</code>属性，\n  而<code>one</code>、<code>two</code>和<code>three</code>因为属性值为普通对象或数组，将被忽略，\n  其中<code>one</code>对应3个函数，将会把函数的返回值展开后添加到当前<a href=\"#!/api/Model\" rel=\"Model\" class=\"docClass\">Model</a></p>\n\n<p>  同样，注意在嵌套的同时，各属性名 <strong>不要相同</strong> ，除非该属性名称没用，\n  以避免出现数据相互覆盖的情况</p></li>\n</ul>\n\n\n<p>通过数据获取配置项</p>\n\n<p>上文所述的各种方案，均是数据获取配置项的简写，\n一个数据获取配置项的结构请参考<a href=\"#!/api/meta.DatasourceOption\" rel=\"meta.DatasourceOption\" class=\"docClass\">meta.DatasourceOption</a>的说明</p>\n\n<p>因此，可以使用数据获取配置项来处理一些例外情况，比如并行加载2个对象，\n且2个对象均无对应的键值，需要完整添加到<code>Model</code>对象：</p>\n\n<pre><code>// 并行加载对象并完整添加到`Model`对象\ndatasource = [\n    {\n        retrieve: require('./datasource').remote('/model/list'),\n        dump: true\n    },\n    {\n        retrieve: require('./datasource').remote('/user/info'),\n        dump: true\n    }\n];\n</code></pre>\n\n<p>对于不同的简写，其与数据获取配置项的对应关系如下：</p>\n\n<ul>\n<li>普通的函数，映射为<code>{ retrieve: {fn}, dump: true }</code></li>\n<li>对象中的一个属性，映射为<code>{ retrieve: {fn}, name: {name} }</code></li>\n</ul>\n\n</div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-constructor' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Model'>Model</span><br/><a href='source/Model.html#Model-method-constructor' target='_blank' class='view-source'>view source</a></div><strong class='new-keyword'>new</strong><a href='#!/api/Model-method-constructor' class='name expandable'>Model</a>( <span class='pre'></span> ) : <a href=\"#!/api/Model\" rel=\"Model\" class=\"docClass\">Model</a><span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Model\" rel=\"Model\" class=\"docClass\">Model</a></span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-addPendingWorker' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Model'>Model</span><br/><a href='source/Model.html#Model-method-addPendingWorker' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Model-method-addPendingWorker' class='name expandable'>addPendingWorker</a>( <span class='pre'>worker</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>添加一个未完成的工作对象\n\n将一个meta.Promise对象添加到当前的Model对象上，\n则当此meta.Promise对象进入resolved或rejected`状态后，会自动移除\n\n而未移除的这些meta.Promise对象，...</div><div class='long'><p>添加一个未完成的工作对象</p>\n\n<p>将一个<a href=\"#!/api/meta.Promise\" rel=\"meta.Promise\" class=\"docClass\">meta.Promise</a>对象添加到当前的<a href=\"#!/api/Model\" rel=\"Model\" class=\"docClass\">Model</a>对象上，\n则当此<a href=\"#!/api/meta.Promise\" rel=\"meta.Promise\" class=\"docClass\">meta.Promise</a>对象进入<code>resolved或</code>rejected`状态后，会自动移除</p>\n\n<p>而未移除的这些<a href=\"#!/api/meta.Promise\" rel=\"meta.Promise\" class=\"docClass\">meta.Promise</a>对象，会在当前<a href=\"#!/api/Model\" rel=\"Model\" class=\"docClass\">Model</a>对象销毁果，\n一并进行销毁。一个<a href=\"#!/api/meta.Promise\" rel=\"meta.Promise\" class=\"docClass\">meta.Promise</a>对象如果额外提供<code>abort()</code>方法，\n则调用此方法进行销毁，其它情况下直接丢弃</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>worker</span> : <a href=\"#!/api/meta.Promise\" rel=\"meta.Promise\" class=\"docClass\">meta.Promise</a><div class='sub-desc'><p>工作对象</p>\n</div></li></ul></div></div></div><div id='method-clone' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Model'>Model</span><br/><a href='source/Model.html#Model-method-clone' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Model-method-clone' class='name expandable'>clone</a>( <span class='pre'></span> ) : <a href=\"#!/api/Model\" rel=\"Model\" class=\"docClass\">Model</a><span class=\"signature\"></span></div><div class='description'><div class='short'>克隆当前Model对象，产生一个新的Model对象 ...</div><div class='long'><p>克隆当前<a href=\"#!/api/Model\" rel=\"Model\" class=\"docClass\">Model</a>对象，产生一个新的<a href=\"#!/api/Model\" rel=\"Model\" class=\"docClass\">Model</a>对象</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Model\" rel=\"Model\" class=\"docClass\">Model</a></span><div class='sub-desc'><p>克隆后的新<a href=\"#!/api/Model\" rel=\"Model\" class=\"docClass\">Model</a>对象</p>\n</div></li></ul></div></div></div><div id='method-dispose' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Model'>Model</span><br/><a href='source/Model.html#Model-method-dispose' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Model-method-dispose' class='name expandable'>dispose</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>销毁当前Model对象，会尝试停止所有正在加载的数据 ...</div><div class='long'><p>销毁当前<a href=\"#!/api/Model\" rel=\"Model\" class=\"docClass\">Model</a>对象，会尝试停止所有正在加载的数据</p>\n</div></div></div><div id='method-dump' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Model'>Model</span><br/><a href='source/Model.html#Model-method-dump' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Model-method-dump' class='name expandable'>dump</a>( <span class='pre'></span> ) : Object<span class=\"signature\"></span></div><div class='description'><div class='short'>将当前Model对象导出为一个普通的对象 ...</div><div class='long'><p>将当前<a href=\"#!/api/Model\" rel=\"Model\" class=\"docClass\">Model</a>对象导出为一个普通的对象</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>一个普通的对象，修改该对象不会影响到当前<a href=\"#!/api/Model\" rel=\"Model\" class=\"docClass\">Model</a>对象</p>\n</div></li></ul></div></div></div><div id='method-fill' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Model'>Model</span><br/><a href='source/Model.html#Model-method-fill' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Model-method-fill' class='name expandable'>fill</a>( <span class='pre'>extension, [options]</span> ) : Object<span class=\"signature\"></span></div><div class='description'><div class='short'>批量设置值 ...</div><div class='long'><p>批量设置值</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>extension</span> : Object<div class='sub-desc'><p>批量值的存放对象</p>\n</div></li><li><span class='pre'>options</span> : Object (optional)<div class='sub-desc'><p>相关选项</p>\n<ul><li><span class='pre'>silent</span> : boolean (optional)<div class='sub-desc'><p>如果该值为<code>true</code>则不触发<a href=\"#!/api/Model-event-change\" rel=\"Model-event-change\" class=\"docClass\">change</a>事件</p>\n<p>Defaults to: <code>false</code></p></div></li></ul></div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>返回<code>extension</code>对象</p>\n</div></li></ul><h3 class='pa'>Fires</h3><ul><li><a href=\"#!/api/Model-event-change\" rel=\"Model-event-change\" class=\"docClass\">change</a></li></ul></div></div></div><div id='method-get' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Model'>Model</span><br/><a href='source/Model.html#Model-method-get' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Model-method-get' class='name expandable'>get</a>( <span class='pre'>name</span> ) : Mixed<span class=\"signature\"></span></div><div class='description'><div class='short'>获取对应键的值 ...</div><div class='long'><p>获取对应键的值</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>name</span> : string<div class='sub-desc'><p>属性名</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Mixed</span><div class='sub-desc'><p><code>name</code>对应的值</p>\n</div></li></ul></div></div></div><div id='method-getAsModel' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Model'>Model</span><br/><a href='source/Model.html#Model-method-getAsModel' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Model-method-getAsModel' class='name expandable'>getAsModel</a>( <span class='pre'>name</span> ) : <a href=\"#!/api/Model\" rel=\"Model\" class=\"docClass\">Model</a><span class=\"signature\"></span></div><div class='description'><div class='short'>获取对应键的值并组装为一个新的Model对象后返回 ...</div><div class='long'><p>获取对应键的值并组装为一个新的<a href=\"#!/api/Model\" rel=\"Model\" class=\"docClass\">Model</a>对象后返回</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>name</span> : string<div class='sub-desc'><p>属性名</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Model\" rel=\"Model\" class=\"docClass\">Model</a></span><div class='sub-desc'><p><code>name</code>对应的值组装成的新的<a href=\"#!/api/Model\" rel=\"Model\" class=\"docClass\">Model</a>对象</p>\n</div></li></ul></div></div></div><div id='method-getDatasource' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Model'>Model</span><br/><a href='source/Model.html#Model-method-getDatasource' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Model-method-getDatasource' class='name expandable'>getDatasource</a>( <span class='pre'></span> ) : Object | Array | Function<span class=\"signature\"></span></div><div class='description'><div class='short'>获取数据源配置，默认直接返回datasource属性 ...</div><div class='long'><p>获取数据源配置，默认直接返回<a href=\"#!/api/Model-property-datasource\" rel=\"Model-property-datasource\" class=\"docClass\">datasource</a>属性</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object | Array | Function</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-handleError' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Model'>Model</span><br/><a href='source/Model.html#Model-method-handleError' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Model-method-handleError' class='name expandable'>handleError</a>( <span class='pre'>error</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>处理加载过程中发生的错误\n\n加载过程中的每一个错误都会调用该方法，该方法可以决定错误的处理逻辑：\n\n\n如果方法正常返回，则认为错误已经处理完毕，返回值作为数据值加入到当前Model中\n如果方法抛出异常，则认为错误未经处理，将错误继续向...</div><div class='long'><p>处理加载过程中发生的错误</p>\n\n<p>加载过程中的每一个错误都会调用该方法，该方法可以决定错误的处理逻辑：</p>\n\n<ul>\n<li>如果方法正常返回，则认为错误已经处理完毕，返回值作为数据值加入到当前Model中</li>\n<li>如果方法抛出异常，则认为错误未经处理，将错误继续向上抛出，当前Model加载失败</li>\n</ul>\n\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>error</span> : Object<div class='sub-desc'><p>错误信息</p>\n<ul><li><span class='pre'>name</span> : string (optional)<div class='sub-desc'><p>对应的数据键名</p>\n</div></li><li><span class='pre'>error</span> : Mixed<div class='sub-desc'><p>错误对象</p>\n</div></li></ul></div></li></ul></div></div></div><div id='method-has' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Model'>Model</span><br/><a href='source/Model.html#Model-method-has' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Model-method-has' class='name expandable'>has</a>( <span class='pre'>name</span> ) : boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>判断当前Model对象是否有指定的属性 ...</div><div class='long'><p>判断当前<a href=\"#!/api/Model\" rel=\"Model\" class=\"docClass\">Model</a>对象是否有指定的属性</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>name</span> : string<div class='sub-desc'><p>属性名</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>boolean</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-hasReadableValue' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Model'>Model</span><br/><a href='source/Model.html#Model-method-hasReadableValue' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Model-method-hasReadableValue' class='name expandable'>hasReadableValue</a>( <span class='pre'>name</span> ) : boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>判断当前Model对象是否有指定的属性\n且值不为null、undefined或空字符串 ...</div><div class='long'><p>判断当前<a href=\"#!/api/Model\" rel=\"Model\" class=\"docClass\">Model</a>对象是否有指定的属性\n且值不为<code>null</code>、<code>undefined</code>或空字符串</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>name</span> : string<div class='sub-desc'><p>属性名</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>boolean</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-hasValue' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Model'>Model</span><br/><a href='source/Model.html#Model-method-hasValue' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Model-method-hasValue' class='name expandable'>hasValue</a>( <span class='pre'>name</span> ) : boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>判断当前Model对象是否有指定的属性且值不为null或undefined ...</div><div class='long'><p>判断当前<a href=\"#!/api/Model\" rel=\"Model\" class=\"docClass\">Model</a>对象是否有指定的属性且值不为<code>null</code>或<code>undefined</code></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>name</span> : string<div class='sub-desc'><p>属性名</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>boolean</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-load' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Model'>Model</span><br/><a href='source/Model.html#Model-method-load' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Model-method-load' class='name expandable'>load</a>( <span class='pre'></span> ) : <a href=\"#!/api/meta.Promise\" rel=\"meta.Promise\" class=\"docClass\">meta.Promise</a><span class=\"signature\"></span></div><div class='description'><div class='short'>加载当前Model对象的数据 ...</div><div class='long'><p>加载当前<a href=\"#!/api/Model\" rel=\"Model\" class=\"docClass\">Model</a>对象的数据</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/meta.Promise\" rel=\"meta.Promise\" class=\"docClass\">meta.Promise</a></span><div class='sub-desc'><p>返回一个<a href=\"#!/api/meta.Promise\" rel=\"meta.Promise\" class=\"docClass\">meta.Promise</a>对象，\n在数据加载且<a href=\"#!/api/Model-method-prepare\" rel=\"Model-method-prepare\" class=\"docClass\">prepare</a>方法执行后进入<code>resolved</code>状态，\n如果加载过程中出现错误，则进入<code>rejected</code>状态</p>\n</div></li></ul></div></div></div><div id='method-prepare' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Model'>Model</span><br/><a href='source/Model.html#Model-method-prepare' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Model-method-prepare' class='name expandable'>prepare</a>( <span class='pre'></span> ) : <a href=\"#!/api/meta.Promise\" rel=\"meta.Promise\" class=\"docClass\">meta.Promise</a> | undefined<span class=\"signature\"><span class='protected' >protected</span></span></div><div class='description'><div class='short'>处理加载后的数据\n\n这个方法用于在load完毕后，调整一些数据结构\n\n在该方法执行时，当前的Model对象中\n已经有load方法填充的数据，\n可使用get、set和remove\n方法对数据进行调整\n\n该方法默认不执行任何逻辑\n\n如果在...</div><div class='long'><p>处理加载后的数据</p>\n\n<p>这个方法用于在<a href=\"#!/api/Model-method-load\" rel=\"Model-method-load\" class=\"docClass\">load</a>完毕后，调整一些数据结构</p>\n\n<p>在该方法执行时，当前的<a href=\"#!/api/Model\" rel=\"Model\" class=\"docClass\">Model</a>对象中\n已经有<a href=\"#!/api/Model-method-load\" rel=\"Model-method-load\" class=\"docClass\">load</a>方法填充的数据，\n可使用<a href=\"#!/api/Model-method-get\" rel=\"Model-method-get\" class=\"docClass\">get</a>、<a href=\"#!/api/Model-method-set\" rel=\"Model-method-set\" class=\"docClass\">set</a>和<a href=\"#!/api/Model-method-remove\" rel=\"Model-method-remove\" class=\"docClass\">remove</a>\n方法对数据进行调整</p>\n\n<p>该方法默认不执行任何逻辑</p>\n\n<p>如果在<code>prepare</code>方法中有异步的操作，\n可以让方法返回一个<a href=\"#!/api/meta.Promise\" rel=\"meta.Promise\" class=\"docClass\">meta.Promise</a>对象，\n<a href=\"#!/api/Model-method-load\" rel=\"Model-method-load\" class=\"docClass\">load</a>方法会等待其进入`resolved状态</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/meta.Promise\" rel=\"meta.Promise\" class=\"docClass\">meta.Promise</a> | undefined</span><div class='sub-desc'><p>如果<code>prepare</code>的逻辑中有异步操作，\n则返回一个<a href=\"#!/api/meta.Promise\" rel=\"meta.Promise\" class=\"docClass\">meta.Promise</a>对象，通知调用者等待</p>\n</div></li></ul></div></div></div><div id='method-remove' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Model'>Model</span><br/><a href='source/Model.html#Model-method-remove' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Model-method-remove' class='name expandable'>remove</a>( <span class='pre'>name, [options]</span> ) : Mixed<span class=\"signature\"></span></div><div class='description'><div class='short'>删除对应键的值 ...</div><div class='long'><p>删除对应键的值</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>name</span> : string<div class='sub-desc'><p>属性名</p>\n</div></li><li><span class='pre'>options</span> : Object (optional)<div class='sub-desc'><p>相关选项</p>\n<ul><li><span class='pre'>silent</span> : boolean (optional)<div class='sub-desc'><p>如果该值为<code>true</code>则不触发<a href=\"#!/api/Model-event-change\" rel=\"Model-event-change\" class=\"docClass\">change</a>事件</p>\n<p>Defaults to: <code>false</code></p></div></li></ul></div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Mixed</span><div class='sub-desc'><p>在删除前<code>name</code>对应的值</p>\n</div></li></ul><h3 class='pa'>Fires</h3><ul><li><a href=\"#!/api/Model-event-change\" rel=\"Model-event-change\" class=\"docClass\">change</a></li></ul></div></div></div><div id='method-set' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Model'>Model</span><br/><a href='source/Model.html#Model-method-set' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Model-method-set' class='name expandable'>set</a>( <span class='pre'>name, value, [options]</span> ) : Mixed<span class=\"signature\"></span></div><div class='description'><div class='short'>设置值 ...</div><div class='long'><p>设置值</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>name</span> : string<div class='sub-desc'><p>属性名</p>\n</div></li><li><span class='pre'>value</span> : Mixed<div class='sub-desc'><p>对应的值</p>\n</div></li><li><span class='pre'>options</span> : Object (optional)<div class='sub-desc'><p>相关选项</p>\n<ul><li><span class='pre'>silent</span> : boolean (optional)<div class='sub-desc'><p>如果该值为<code>true</code>则不触发<a href=\"#!/api/Model-event-change\" rel=\"Model-event-change\" class=\"docClass\">change</a>事件</p>\n<p>Defaults to: <code>false</code></p></div></li></ul></div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Mixed</span><div class='sub-desc'><p>返回<code>value</code>对象</p>\n</div></li></ul><h3 class='pa'>Fires</h3><ul><li><a href=\"#!/api/Model-event-change\" rel=\"Model-event-change\" class=\"docClass\">change</a></li></ul></div></div></div><div id='method-valueOf' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Model'>Model</span><br/><a href='source/Model.html#Model-method-valueOf' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Model-method-valueOf' class='name expandable'>valueOf</a>( <span class='pre'></span> ) : Object<span class=\"signature\"><span class='deprecated' >deprecated</span></span></div><div class='description'><div class='short'>将当前Model对象导出为一个普通的对象 ...</div><div class='long'><p>将当前<a href=\"#!/api/Model\" rel=\"Model\" class=\"docClass\">Model</a>对象导出为一个普通的对象</p>\n        <div class='rounded-box deprecated-box deprecated-tag-box'>\n        <p>This method has been <strong>deprected</strong> </p>\n        <p>建议使用<a href=\"#!/api/Model-method-dump\" rel=\"Model-method-dump\" class=\"docClass\">dump</a>方法</p>\n\n        </div>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>一个普通的对象，修改该对象不会影响到当前<a href=\"#!/api/Model\" rel=\"Model\" class=\"docClass\">Model</a>对象</p>\n</div></li></ul></div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-event'>Events</h3><div class='subsection'><div id='event-change' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Model'>Model</span><br/><a href='source/Model.html#Model-event-change' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Model-event-change' class='name expandable'>change</a>( <span class='pre'>changes</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>属性值发生变化时触发 ...</div><div class='long'><p>属性值发生变化时触发</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>changes</span> : <a href=\"#!/api/meta.ChangeRecord\" rel=\"meta.ChangeRecord\" class=\"docClass\">meta.ChangeRecord</a>[]<div class='sub-desc'><p>发生变化的记录项</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});